import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:table_calendar/table_calendar.dart';
import 'dashboard_page.dart';

class TytProgramPage extends StatefulWidget {
  const TytProgramPage({super.key});

  @override
  State<TytProgramPage> createState() => _TytProgramPageState();
}

class _TytProgramPageState extends State<TytProgramPage> {
  final List<String> konular = [
    'Temel Kavramlar',
    'SayÄ± BasamaklarÄ±',
    'BÃ¶lme ve BÃ¶lÃ¼nebilme',
    'EBOB â€“ EKOK',
    'Rasyonel SayÄ±lar',
    'Basit EÅŸitsizlikler',
    'Mutlak DeÄŸer',
    'ÃœslÃ¼ SayÄ±lar',
    'KÃ¶klÃ¼ SayÄ±lar',
    'Ã‡arpanlara AyÄ±rma',
    'Oran OrantÄ±',
    'Denklem Ã‡Ã¶zme',
    'Problemler',
    'SayÄ± Problemleri',
    'Kesir Problemleri',
    'YaÅŸ Problemleri',
    'Hareket HÄ±z Problemleri',
    'Ä°ÅŸÃ§i Emek Problemleri',
    'YÃ¼zde Problemleri',
    'Kar Zarar Problemleri',
    'KarÄ±ÅŸÄ±m Problemleri',
    'Grafik Problemleri',
    'Rutin Olmayan Problemler',
    'KÃ¼meler â€“ Kartezyen Ã‡arpÄ±m',
    'MantÄ±k',
    'Fonksiyonlar',
    'Polinomlar',
    '2.Dereceden Denklemler',
    'PermÃ¼tasyon ve Kombinasyon',
    'OlasÄ±lÄ±k',
    'Veri â€“ Ä°statistik',
  ];

  String _selectedRange = '1-2';
  DateTime? _startDate;
  List<DateTime> _selectedDates = [];

  final List<String> _ranges = [
    '0-1',
    '1-2',
    '2-3',
    '3-4',
    '4-5',
    '5-6',
    '6-7',
    '7-8',
    '8-9',
    '9-10',
    '10++',
  ];

  int get estimatedDays {
    final parts = _selectedRange.split('-');
    double avgHours;
    if (_selectedRange == '10++') {
      avgHours = 11;
    } else {
      avgHours = (int.parse(parts[0]) + int.parse(parts[1])) / 2;
    }
    final totalHours = konular.length * 1.0;
    final days = (totalHours / avgHours).ceil() + 1;
    return days;
  }

  void _onDaySelected(DateTime selectedDay, DateTime focusedDay) {
    _startDate = selectedDay;
    _selectedDates = List.generate(
      estimatedDays,
          (index) => selectedDay.add(Duration(days: index)),
    );
    setState(() {});
  }

  Future<void> _saveProgram() async {
    final konularPerGun = konular.length / estimatedDays;
    Map<String, List<String>> program = {};

    for (var i = 0; i < estimatedDays; i++) {
      final start = (i * konularPerGun).floor();
      final end = ((i + 1) * konularPerGun).ceil();
      final day = _selectedDates[i];
      program[DateTime(day.year, day.month, day.day).toIso8601String()] =
          konular.sublist(
            start,
            end > konular.length ? konular.length : end,
          );
    }

    final dir = await getApplicationDocumentsDirectory();
    final file = File('${dir.path}/program.json');
    await file.writeAsString(jsonEncode(program));

    debugPrint('âœ… Program JSON Kaydedildi: ${file.path}');

    if (mounted) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const DashboardPage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'ðŸ“š TYT ProgramÄ±',
          style: TextStyle(
            color: Colors.black87,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.black87),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            const Text(
              'GÃ¼nde kaÃ§ saat Ã§alÄ±ÅŸabilirsin?',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<String>(
              value: _selectedRange,
              decoration: InputDecoration(
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              items: _ranges.map((e) {
                return DropdownMenuItem(value: e, child: Text(e));
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _selectedRange = value!;
                  _startDate = null;
                  _selectedDates = [];
                });
              },
            ),
            const SizedBox(height: 20),
            Text(
              'Tahmini gÃ¼n: $estimatedDays gÃ¼n',
              style: const TextStyle(fontSize: 16, color: Colors.green),
            ),
            const SizedBox(height: 24),
            const Text(
              'ArdÄ±ÅŸÄ±k gÃ¼nleri seÃ§',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            TableCalendar(
              firstDay: DateTime.now(),
              lastDay: DateTime.now().add(const Duration(days: 365)),
              focusedDay: _startDate ?? DateTime.now(),
              selectedDayPredicate: (day) =>
                  _selectedDates.any((d) => isSameDay(d, day)),
              onDaySelected: _onDaySelected,
              calendarStyle: const CalendarStyle(
                isTodayHighlighted: true,
                selectedDecoration: BoxDecoration(
                  color: Colors.lightBlue,
                  shape: BoxShape.circle,
                ),
                todayDecoration: BoxDecoration(
                  color: Colors.blueGrey,
                  shape: BoxShape.circle,
                ),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _selectedDates.length == estimatedDays
                  ? _saveProgram
                  : null,
              icon: const Icon(Icons.check_circle),
              label: const Text('Kaydet ve Dashboard'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                backgroundColor: Colors.lightBlue,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
